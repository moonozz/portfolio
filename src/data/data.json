{
  "Dev": [
    {
      "id": 1,
      "title": "Perpett",
      "items": ["Team Project"],
      "imgUrl": "Home-perpett.png",
      "link": "http://testqjzlt.s3-website.ap-northeast-2.amazonaws.com/",
      "github": "https://github.com/codestates-seb/seb43_main_030",
      "figma": "https://www.figma.com/file/PFOgIanoWAdQqqgtEtRWUM/%EB%B0%98%EB%A0%A4%EB%8F%99%EB%AC%BC-%EC%9C%A0%EC%B9%98%EC%9B%90-%EA%B8%B0%ED%9A%8D-%EB%B0%8F-%EB%94%94%EC%9E%90%EC%9D%B8?type=design&node-id=726-7469&mode=design&t=lPhmq71RjNvxv4Lm-0",
      "notion": "https://www.notion.so/Perpett-be2ff9e7275442fdb418cd197154633b",
      "date": "2023.05",
      "info": "서울에 반려견 유치원 정보를 모아 보여주고, 각 유치원 커뮤니티를 이용할 수 있는 플랫폼",
      "infoDetail": [
        "∙ Front-end, 화면 설계, UI/UX",
        "∙ 로그인, 회원가입, 인증메일 전송, Oauth(Google, Kakao)",
        "∙ 유치원 상세페이지",
        "∙ 마이페이지(프로필 CRUD, 프로필 변경추가삭제)"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "Tailwind CSS로 협업 시 반복되는 코드와 수정을 보다 쉽게 해결",
          "detail": [
            "⇒ 자주 사용하는 스타일을 class 로 지정해두어 협업 시 중복되는 스타일을 방지"
          ]
        },
        {
          "tag": "개발",
          "title": "공통 컴포넌트 제작(Footer, Pagination, Modal)",
          "detail": []
        },
        {
          "tag": "개발",
          "title": "로그인, 회원가입 유효성 검사 및 메일 인증 작업 페이지 작업 및 Oauth",
          "detail": [
            "⇒ 넘길 데이터를 객체 상태로 정의하고, 메일 인증용∙오류메시지용∙유효성검사용 등의 state 정의 후 정규식으로 확인",
            "⇒ onSignup 함수나 email을 체크하는 함수 등 을 useCallback(특정 함수를 새로 만들지 않고 재사용하고 싶을때 사용)으로 감싸서 재사용 할 수 있게 만들기"
          ]
        },
        {
          "tag": "개발",
          "title": "구글, 카카오 Oauth 작업, OauthRole 선택 페이지 작업",
          "detail": [
            "⇒ Oauth의 구현 방식 이해",
            "⇒ 서버와의 통신이 완료되기 전에 새페이지로 이동해 인증 처리가 안될 수 있는 부분을 async로 비동기적으로 동작해서 함수가 완전이 끝난 후 다음 동작 넘어가게 처리",
            "⇒ new URL() 과 searchParams.get() 으로 원하는 쿼리파라미터 값 추출",
            "⇒ Oauth로 회원가입 하는 경우 계정 생성을 어떤걸로 할지 선택 화면 추가 작업",
            "⇒ Oauth 회원가입 중 구글은 이메일을 넘겨주는데 카카오는 넘겨주지 않아서 입력하는 창 필요하며, 구글의 경우는 입력하지 못하게 처리"
          ]
        },
        {
          "tag": "개발",
          "title": "유치원 상세페이지",
          "detail": ["⇒ axios.all() 사용(3개의 api 요청)"]
        },
        {
          "tag": "개발",
          "title": "마이페이지, 프로필 추가 모달, 회원정보 수정 모달",
          "detail": ["⇒ formData 로 PATCH 데이터 전송"]
        },
        {
          "tag": "개발",
          "title": "프로필 CRUD",
          "detail": []
        },
        {
          "tag": "UX/UI",
          "title": "기획 리드 및 디자인 관련 컴포넌트 & 전체 디자인 작업",
          "detail": [
            "⇒ 전체 규칙 및 컴포넌트들과 반응형 디자인을 미리 작업해 개발 진행 속도가 빨라짐"
          ]
        }
      ],
      "skill": [
        "React",
        "Redux-toolkit",
        "Axios",
        "tailwindCSS",
        "html",
        "css",
        "Javascript",
        "반응형",
        "Figma"
      ],
      "mainImg": "Main-perpett.png",
      "projectImgPC": [
        "Perpett-pc-01.png",
        "Perpett-pc-02.png",
        "Perpett-pc-03.png",
        "Perpett-pc-04.png",
        "Perpett-pc-05.png",
        "Perpett-pc-06.png"
      ],
      "projectGif": [],
      "projectImgMobile": [
        "Perpett-m-00.png",
        "Perpett-m-01.png",
        "Perpett-m-02.png",
        "Perpett-m-03.png",
        "Perpett-m-04.png",
        "Perpett-m-05.png",
        "Perpett-m-06.png",
        "Perpett-m-07.png",
        "Perpett-m-08.png"
      ]
    },
    {
      "id": 2,
      "title": "Poopoo",
      "items": ["Personal Project"],
      "imgUrl": "Home-poopoo.png",
      "link": "https://moono-poopoo.netlify.app/",
      "github": "https://github.com/moonozz/poopoo",
      "figma": "https://www.figma.com/file/3YQNMdsJew2jKJm4sJifPs/poopoo?type=design&node-id=0-1&mode=design&t=1Ebgf7gP4WvqYQ7E-0",
      "notion": "https://www.notion.so/Poopoo-18eed3673cff412fab56ac75cb2285f9?pvs=23",
      "date": "2024.02",
      "info": "지하철에서 갑자기 화장실이 급할 때! 화장실의 정보를 제공하고 개인적인 메모를 남겨서 저장할 수 있는 서비스",
      "infoDetail": [
        "∙ Front-end, 외부 API 활용, 역 검색, 메모 local에 저장, UX/UI",
        "∙ 메인에서 검색창 클릭 시 검색페이지로 이동 ⇒ 단어 입력 시 해당 단어로 시작하는 지하철 역 노출 ⇒ 원하는 지하철 역 선택 ⇒ 해당 지하철의 상세페이지 이동 ⇒ 지하철의 화장실 정보 보여주고, 메모 입력 가능"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "Axios 활용해 선택한 지하철의 화장실 정보 가져오고 상세페이지에 메모 저장하기",
          "detail": []
        },
        {
          "tag": "개발",
          "title": "Zustand 사용하기",
          "detail": [
            "⇒ 가벼운 서비스에서 state 관리를 하는데 보다 쉽고, 빠르게 적용이 가능하다고 하여 사용",
            "⇒ persist를 사용해 새로고침시에도 데이터 불러오기 위해 local에 state값 저장"
          ]
        },
        {
          "tag": "개발",
          "title": "필요한 API 활용",
          "detail": [
            "⇒ 기존 사용하려던 API",
            "호선별로 넘겨주는 데이터가 다 다름",
            "각 호선별로 데이터를 불러오는데 호선마다 요청하는 url 이 다름",
            "발급받은 api key만 넘기는 방식으로 해당 호선의 전체 데이터를 넘겨줘서 추가적인 데이터 필터링 필요",
            "⇒ 서치 후 새로 적용한 API",
            "하나의 url로 원하는 방식의 데이터 추출 (선택한 역의 lineCode, stationCode 등을 넘겨서 데이터 받음)",
            "더 많은 지하철 호선의 데이터를 가지고 있음"
          ]
        },
        {
          "tag": "개발",
          "title": "같은 이름을 가진 지하철 역 데이터 저장",
          "detail": [
            "⇒ 문제: 같은 역인데 일부 역은 저장하지 않는 문제 발생",
            "⇒ 해결: split을 사용해 (를 기준으로 자르고 자른 배열 중 0번째 데이터만 저장"
          ]
        },
        {
          "tag": "개발",
          "title": "지하철 역의 정보 json으로 저장",
          "detail": [
            "⇒ 지하척 역 정보가 엑셀로만 저장되어 있었고, 전국의 지하철 정보를 저장하고 있어서 필요한 서울, 경기 지역의 지하철 데이터만 추려 json으로 변환 후 저장"
          ]
        },
        {
          "tag": "UX",
          "title": "보통 지하철을 탈때는 핸드폰에서 검색할테니 모바일용으로 구현 및 공통 컴포넌트 제작(Header)",
          "detail": []
        }
      ],
      "skill": [
        "React",
        "Zustand",
        "TailwindCSS",
        "Axios",
        "Netlify",
        "html",
        "css",
        "Javascript",
        "Figma"
      ],
      "mainImg": "Main-poopoo.png",
      "projectImgPC": [],
      "projectGif": [],
      "projectImgMobile": [
        "poopoo-m-01.png",
        "poopoo-m-02.png",
        "poopoo-m-03.png",
        "poopoo-m-04.png",
        "poopoo-m-05.png",
        "poopoo-m-06.png",
        "poopoo-m-07.png"
      ]
    },
    {
      "id": 3,
      "title": "ya, 점심 뭐야?",
      "items": ["Personal Project"],
      "imgUrl": "Home-schoolMeals.png",
      "link": "https://moonozz-school-meals.netlify.app/",
      "github": "https://github.com/moonozz/school-meals",
      "figma": "https://www.figma.com/file/8S8z4Kr3N2b6S6GC61KEPf/school-meal?type=design&mode=design&t=Q5A6DXtngPXwCztk-0",
      "notion": "https://www.notion.so/Ya-4ee732d247d84a1e8de0ced3c78a6eca",
      "date": "2024.01",
      "info": "월별 급식 정보 제공 서비스",
      "infoDetail": [
        "∙ Front-end, 외부 API 활용, Datepicker, UX/UI",
        "∙ 날짜 선택(현재 월 default), 지역 선택과 학교 검색 후 학교 선택 시 급식 검색 결과 노출 순서로 진행"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "Typescript 적용 | redux store 설정과 styled-component 설정",
          "detail": [
            "⇒ 미리 type을 정의해서 오류를 줄이고, styled-component 사용 시 따로 정의해둔 타입을 미리 보여줘서 오류를 줄일 수 있었다."
          ]
        },
        {
          "tag": "개발",
          "title": "Axios 사용한 공공 API 활용",
          "detail": [
            "⇒ api key 발급 후 .env 파일에 넣었는데 유효하지 않은 키라는 에러 발생",
            "⇒ vscode 재실행하니 간단하게 해결",
            "⇒ 외부에 공개된 api 를 사용해 데이터 추출 후 보여주기"
          ]
        },
        {
          "tag": "개발",
          "title": "Datepicker 사용",
          "detail": [
            "⇒ 경험 및 문제해결: fetch 할 때 받아올 url에 쉽게 넘기기 위해 date의 state type을 string으로 설정했으므로 new Date() 해서 나온 값을 어떻게 string 타입으로 변환 시켜줄 것인지 고민",
            "⇒ .toDateString() 과 .toLocaleDateString() 중에 내가 변환하기 쉽게 나오는 .toDateString() 으로 추출해 적용",
            "⇒ 이유: toDateString은 Mon Jan 10 2024 로 나오고 toLocaleDateString은 2024. 1. 10. 으로 나오기 때문에 가공해야 할 양의 차이가 있었음",
            "⇒ 추후 해결하고 싶은 문제: 제작한 modal 컴포넌트에서 datepicker 띄워서 사용하기"
          ]
        },
        {
          "tag": "개발",
          "title": "Netlify 배포",
          "detail": [
            "⇒ netlify 배포는 제대로 됐는데 데이터 요청이 되지 않고, 일치하지 않은 api key 라는 에러 발생",
            "⇒ netlify env에 저장된 key 와 value 값을 저장 후 재배포"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "디자인 관련 전체 작업",
          "detail": []
        }
      ],
      "skill": [
        "React",
        "Typescript",
        "Redux-toolkit",
        "Styled-Component",
        "Axios",
        "Netlify",
        "html",
        "css",
        "반응형",
        "Figma"
      ],
      "mainImg": "Main-schoolMeals.png",
      "projectImgPC": [
        "schoolMeals-pc-01.png",
        "schoolMeals-pc-02.png",
        "schoolMeals-pc-03.png",
        "schoolMeals-pc-04.png",
        "schoolMeals-pc-05.png"
      ],
      "projectGif": [],
      "projectImgMobile": [
        "schoolMeals-m-01.png",
        "schoolMeals-m-02.png",
        "schoolMeals-m-03.png",
        "schoolMeals-m-04.png",
        "schoolMeals-m-05.png"
      ]
    },
    {
      "id": 4,
      "title": "Portfolio",
      "items": ["Personal Project"],
      "imgUrl": "Home-portfolio.png",
      "link": "https://moono-portfolio.netlify.app/",
      "github": "https://github.com/moonozz/portfolio",
      "figma": "https://www.figma.com/file/EPI2i7U2AmKbX6MzEaIebg/portfolio?type=design&node-id=0-1&mode=design&t=JpuOmJaiiUoL3WjE-0",
      "notion": "https://www.notion.so/Portfolio-cdea2b3b1bb14a6f92dfff322522ba51",
      "date": "2023.09",
      "info": "작업했던 개발 프로젝트와 이전 이력의 프로젝트를 한번에 보여주며, 편리한 UX를 제공하는 포트폴리오",
      "infoDetail": [
        "∙ Front-end, 화면 설계, UI/UX",
        "∙ Redux toolkit, Styled-Components 등 다양한 라이브러리 적용",
        "∙ Card 와 Tag 를 컴포넌트로 분리",
        "∙ 각 프로덕트 페이지를 한 페이지로 만들어 data.json 활용해 데이터 뿌려주기",
        "∙ Intersection Observer 를 활용해 애니메이션 제작"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "메인 영역",
          "detail": [
            "⇒ 경험: keyframes 로 제작 후 animation 에 가져와서 사용",
            "⇒ 문제①: 메인의 text가 흐르는데 끊기며 반복 재생되는 듯한 문제 발생",
            "⇒ 해결①: animation 의 초와 keyframes에 translate3d 의 x축 % 조절"
          ]
        },
        {
          "tag": "개발",
          "title": "data.json 으로 정보 불러오기",
          "detail": [
            "⇒ 경험: 각 프로덕트 별 페이지를 만드는게 아니라 프로덕트 페이지를 하나의 컴포넌트 형식으로 만든 후 data.json에 프로덕트 별 데이터를 정리 후 뿌려주기",
            "⇒ 문제①: data.json을 활용해 작업할 때 이미지 보여주기",
            "⇒ 해결①: 계속해서 이미지가 바뀌는 경우 public 폴더 안에 이미지를 넣어서 사용하면 편하게 사용할 수 있는데, import 할 때 process.env.PUBLIC_URL 라는 Syntax를 사용해 따로 import 하지 않고 사용"
          ]
        },
        {
          "tag": "개발",
          "title": "컴포넌트 제작",
          "detail": [
            "⇒ 경험: 어떤 페이지에서 어떻게 구현될 지 이해하고 제작하는 방법",
            "⇒ 문제①: Tag 컴포넌트의 border 컬러를 사용 페이지에 따라 바꿔야 하는 문제 발생",
            "⇒ 해결①: 사용하는 페이지에서 borderColor={theme.color.black} 으로 props로 전달해주고 Tag에서 borderColor를 props로 받아 $borderColor={borderColor}로 지정해 주고 css 에서 border-color 지정해주기",
            "⇒ 문제②: Card 컴포넌트를 클릭했을 때 페이지로 넘어가야해서 Link 로 감싸뒀는데 Styled-Component 를 줘야한다면?",
            "⇒ 해결②: const StyledLint = styled(Link)`...`"
          ]
        },
        {
          "tag": "개발",
          "title": "Intersection Observer",
          "detail": [
            "⇒ 경험: 스크롤 시 뷰포트의 위치에 따라 Card가 아래에서 위로 보여지는 애니메이션 구현",
            "⇒ 문제①: transform: translateX는 잘되는데 translateY 는 렉걸린 것 처럼 버벅임",
            "⇒ 해결①: 보이는 컴포넌트에 디폴트로 opacity:0 과 위치 값을 저장해두고, observe 되면 새로운 스타일이 적용된 클래스 추가하기"
          ]
        },
        {
          "tag": "개발",
          "title": "Redux-toolkit",
          "detail": [
            "⇒ 경험: header와 project, scroll 의 위치를 기억하고 localStorage에 저장해 값 비교 후 컴포넌트 보여지는 방식을 다르게 구현",
            "⇒ 문제①: 새로고침 했을 때 Header의 상태값이 변하는 문제",
            "⇒ 해결①: localStorage에 저장 후 해당 값을 비교해서 Header 컬러 바꿔주게 진행"
          ]
        },
        {
          "tag": "개발",
          "title": "스크롤 위치",
          "detail": [
            "⇒ 문제①: 메인 페이지에서의 스크롤 값을 기억하는데 스크롤이 될때마다 이벤트가 발생하는 문제",
            "⇒ 해결①: Card 가 클릭 됐을 때 스크롤의 위치를 기억하면 되니, Card 컴포넌트에서 click 이벤트에 스크롤 위치를 저장한 후 헤더의 Back to main을 눌렀을 때 스크롤 위치로 돌려주게 처리"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "디자인 관련 전체 작업",
          "detail": []
        }
      ],
      "skill": [
        "React",
        "Redux-toolkit",
        "Styled-Component",
        "html",
        "css",
        "Javascript",
        "Netlify",
        "반응형",
        "Figma"
      ],
      "mainImg": "Main-portfolio.png",
      "projectImgPC": [
        "Portfolio-pc-01.png",
        "Portfolio-pc-02.png",
        "Portfolio-pc-03.png",
        "Portfolio-pc-04.png",
        "Portfolio-pc-05.png",
        "Portfolio-pc-06.png"
      ],
      "projectGif": [],
      "projectImgMobile": [
        "Portfolio-m-01.png",
        "Portfolio-m-02.png",
        "Portfolio-m-03.png",
        "Portfolio-m-04.png",
        "Portfolio-m-05.png",
        "Portfolio-m-06.png",
        "Portfolio-m-07.png"
      ]
    },
    {
      "id": 5,
      "title": "Dark TODO",
      "items": ["Personal Project"],
      "imgUrl": "Home-darktodo.png",
      "link": "https://moonozz-darkmode-todo.netlify.app/",
      "github": "https://github.com/moonozz/darkmode-todo",
      "figma": "https://www.figma.com/file/RFPzgmRFJuKLQ9AbDp6Dbr/DarkTODO?type=design&mode=design&t=bYtQe68fYZbg6jDs-0",
      "notion": "https://www.notion.so/Dark-TODO-2ea1187428104bc09fde0baccb31df92",
      "date": "2023.04",
      "info": "CRUD 및 다크모드를 적용한 TODO LIST",
      "infoDetail": [
        "∙ Front-end, 화면 설계, UI/UX",
        "∙ Styled-Component를 활용해 다크모드 제작",
        "∙ 투두리스트 CRUD",
        "∙ 투두리스트의 상태에 따른 필터링"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "Styled-Component로 다크모드 만들기",
          "detail": [
            "⇒ 상태로 mode를 저장하고, 해당 상태값을 바꿔주는 함수를 만든 후 theme.js 파일 안에 각 테마별 변수를 만드는데 해당 변수 안 객체의 키값을 똑같이 맞춰서 제작해 구현",
            "⇒ 버튼 비활성화 상태에서 hover 했을 때 스타일 없애는 구현 (:not 선택자로 :hover 효과 없애기)"
          ]
        },
        {
          "tag": "개발",
          "title": "TODO 상태값 바꿔주기",
          "detail": [
            "⇒ 문제①: 내가 선택한 컴포넌트의 complete 값을 어떻게 바꿔줄 수 있는가에 대한 문제",
            "⇒ 해결①: PATCH를 하는 함수를 만들고 filter 로 이벤트가 발생하는 컴포넌트의 id와 같은 데이터를 찾아서 map을 사용해 complete만 반대값으로 바꿔주는 방식으로 구현"
          ]
        },
        {
          "tag": "개발",
          "title": "TODO 상태에 따른 필터링 구현",
          "detail": [
            "⇒ 필터 관련 상태값을 만들고, 완료인지 미완료인지에 대해 검사하는 if문 함수를 만들어서 필터 관련 상태값이 all 이면 전체 data를 보여주고, 아니라면 filter 메서드로 if문 함수를 호출"
          ]
        },
        {
          "tag": "개발",
          "title": "JsonServer 이용",
          "detail": [
            "⇒ JsonServer 로 데이터 연동",
            "⇒ CRUD에 맞는 fetch 코드 구축 후 Postman으로 데이터 흐름 확인",
            "⇒ JsonServer 이용해 CRUD fetch의 전반적인 흐름 이해"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "디자인 관련 전체 작업",
          "detail": []
        }
      ],
      "skill": [
        "React",
        "Styled-Component",
        "html",
        "css",
        "Javascript",
        "반응형",
        "Figma"
      ],
      "mainImg": "Main-darktodo.png",
      "projectImgPC": [
        "DarkTODO-pc-01.png",
        "DarkTODO-pc-02.png",
        "DarkTODO-pc-03.png",
        "DarkTODO-pc-04.png",
        "DarkTODO-pc-05.png"
      ],
      "projectGif": [],
      "projectImgMobile": []
    },
    {
      "id": 6,
      "title": "Nomad TODO",
      "items": ["Nomad 우수작", "Personal Project"],
      "imgUrl": "Home-nomadtodo.png",
      "link": "https://moonozz.github.io/moono-nomadChallengeTodo/",
      "github": "https://github.com/moonozz/moono-nomadChallengeTodo",
      "figma": "https://www.figma.com/file/bd9dvREOUFLttMxVRVlOhA/nomad-DarkTODO?type=design&node-id=0-1&mode=design&t=bYtQe68fYZbg6jDs-0",
      "notion": "https://www.notion.so/Nomad-TODO-fab46edec95a493caf14fc3eab3fc0fa",
      "date": "2023.09",
      "info": "Nomad JS챌린지 과제로 제작한 투두리스트로 현재 시간과 날씨API 연동",
      "infoDetail": [
        "∙ Front-end, 화면 설계, UI/UX",
        "∙ Nomad JS 챌린지의 마지막 과제로 우수 졸업생 완성작에 선정",
        "∙ 실시간 시간과 날씨를 보여주고, 로컬스토리지에 TODO를 저장해서 새로고침해도 데이터 유지되게 적용",
        "∙ TODO 생성과 TODO의 상태 표시",
        "∙ 생성 및 TODO에 대한 상태 localStorage에 저장해 새로고침해도 데이터 유지"
      ],
      "projectDetail": [
        {
          "tag": "개발",
          "title": "위치 받아와서 현재 지역과 해당 지역의 날씨 보여주기",
          "detail": ["⇒ 날씨 OpenAPI로 위치, 날씨, 온도를 받아온 후 노출"]
        },
        {
          "tag": "개발",
          "title": "새로고침 시 배경화면 랜덤으로 구현",
          "detail": []
        },
        {
          "tag": "개발",
          "title": "TODO 리스트 영역(ul) 만 스크롤",
          "detail": [
            "⇒ li들을 하단 정렬되게 하려고 justify-content:end 했더니 overflow-y:auto 가 작동하지 않음",
            "⇒ flex-direction: column-reverse 로 li 하단 정렬 구현"
          ]
        },
        {
          "tag": "개발",
          "title": "새로 생성되는 TODO가 하단이 아닌 상단에 생기는 문제 + 새로고침 시에만 반영되는 문제",
          "detail": [
            "⇒ spread 연산자 사용해 기존 todos 배열 뒤에 생성되게 만들고, li를 추가할 때 li의 첫번째 요소를 선택하고 첫번째 요소가 있다면 새로 생성하는 li를 그 앞에 추가하기",
            "⇒ insertBefore(생성하는 요소, 선택한 요소)"
          ]
        },
        {
          "tag": "개발",
          "title": "새로 생성한 TODO 보이지 않고 스크롤 아래로 내려야 보이는 문제",
          "detail": ["⇒ scrollTop, scrollHeight 로 구현"]
        },
        {
          "tag": "UX/UI",
          "title": "디자인 관련 전체 작업",
          "detail": []
        }
      ],
      "skill": ["html", "css", "Javascript", "반응형", "Figma"],
      "mainImg": "Main-nomadtodo.png",
      "projectImgPC": [
        "NomadTODO-pc-01.png",
        "NomadTODO-pc-02.png",
        "NomadTODO-pc-03.png",
        "NomadTODO-pc-04.png",
        "NomadTODO-pc-05.png",
        "NomadTODO-pc-06.png",
        "NomadTODO-pc-07.png"
      ],
      "projectGif": [],
      "projectImgMobile": []
    }
  ],
  "Design": [
    {
      "id": 7,
      "title": "Geeks",
      "items": ["APP", "WEB", "POS", "운영"],
      "imgUrl": "Home-geeks.png",
      "link": "",
      "github": "",
      "figma": "https://www.figma.com/design/2PG77CYIHZFITquNXzetsj/geeks-portfolio?node-id=209-2&p=f&t=Y4lubgeAx461MNrq-0",
      "notion": "https://www.notion.so/Geeks-aae64e2a20bc47ba916778a0bf68ce22",
      "date": "2019.01 - 2021.04",
      "info": "사내 첫 UI/UX 담당자로 POS, 파트너사이트, 주문용 웹(dadama), 포스 연동 앱, 사내 홈페이지 등 UI/UX 및 가이드 작업을 진행하였고 전체 브랜드 아이덴티티와 가이드를 잡아 생산성을 높였습니다.",
      "infoDetail": [
        "∙ POS: 서비스 전체 가이드 및 UI/UX",
        "∙ POS 전용 앱: 전체 UI/UX 작업 및 인터랙션 디자인 제작 후 전달",
        "∙ dadama: 전체 UI/UX 작업 및 일부 페이지 프론트 개발 작업",
        "∙ 파트너사이트: 전체 UI/UX 작업",
        "∙ 홈페이지 리뉴얼: 전체 UI/UX 작업 및 메인, 입점 브랜드, 지점 소개페이지 프론트 개발 작업",
        "∙ 사내 운영 디자인"
      ],
      "projectDetail": [
        {
          "tag": "UX/UI",
          "title": "브랜드 디자인, 개발, QA 진행",
          "detail": []
        },
        {
          "tag": "UX/UI",
          "title": "POS (19.01 - 19.06)",
          "detail": [
            "⇒ 매장 주문 및 결제 등 매출 관리를 할 수 있는 시스템",
            "⇒ 문제: 배포 앞두고 컴포넌트마다 ui가 제각각인 부분 발견",
            "⇒ 해결: 관련 컴포넌트들 개발 구현"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "POS 전용 앱 (19.07 1차 | 19.09 2차)",
          "detail": [
            "⇒ POS의 주문 내역과 요기요 등의 주문 알림을 핸드폰에서 확인할 수 있는 앱(Android)",
            "⇒ 문제: 외주 안드로이드 개발자와 소통 시 인터랙션 관련 소통 문제 발생",
            "⇒ 해결: Protopie 로 해당 인터랙션 제작 후 관련 리소스 전달"
          ]
        },
        {
          "tag": "UXUI/개발",
          "title": "dadama (19.11 - 19.12)",
          "detail": [
            "⇒ 업체의 전체 메뉴 확인 후 주문까지 할 수 있는 배달 전용 모바일 웹",
            "⇒ 경험: 사내 개발자에게 물어보면서 일부 페이지 개발 작업",
            "⇒ 문제①: 배포까지 2주일 남은 상태에서 재기획 필요",
            "⇒ 해결①: 현재 개발이 어느정도 진행된 상태라 최대한 맞추고, 컴포넌트를 활용한 디자인으로 제작",
            "⇒ 문제②: 배포 앞둔 시점에 사내 개발자 일정에 의한 부재로 일정을 맞추지 못할 문제 발생",
            "⇒ 해결②: 메인, 주문내역 리스트, 주문내역 상세페이지, 주문 완료 페이지 개발 진행"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "파트너 사이트 (20.01 - 20.04)",
          "detail": ["⇒ POS 사용하는 점주님들을 위한 관리 사이트"]
        },
        {
          "tag": "UX/UI",
          "title": "사내 홈페이지 디자인 (20.05)",
          "detail": [
            "⇒ 기존 홈페이지 정보 부족 및 외부 페이지 연결 추가로 UX/UI 작업 후 외주 개발자와 진행"
          ]
        },
        {
          "tag": "UX/UI",
          "title": "사내 운영 디자인 (20.05 - 21.04)",
          "detail": [
            "⇒ 회사소개서, IR, 리플렛, 공유주방 내부 디자인 가이드 작업 등",
            "⇒ 외부 협력 업체용 상세페이지 디자인 및 외주 컨택 후 워드프레스로 관리"
          ]
        },
        {
          "tag": "UXUI/개발",
          "title": "사내 홈페이지 추가 제작 (21.04)",
          "detail": [
            "⇒ 기존 홈페이지에서 지점 소개 페이지 추가 디자인 및 퍼블리싱 작업"
          ]
        }
      ],
      "skill": [
        "html",
        "css",
        "반응형",
        "Figma",
        "Sketch",
        "Zeplin",
        "Protopie",
        "Photoshop",
        "Illustrator"
      ],
      "mainImg": "Main-geeks.png",
      "projectImgPC": [
        "geeks-pc-01.png",
        "geeks-pc-02.png",
        "geeks-pc-03.png",
        "geeks-pc-04.png",
        "geeks-pc-05.gif",
        "geeks-pc-06.gif",
        "geeks-pc-07.png",
        "geeks-pc-08.png",
        "geeks-pc-09.png"
      ],
      "projectGif": [],
      "projectImgMobile": []
    },
    {
      "id": 8,
      "title": "Yellee",
      "items": ["WEB"],
      "imgUrl": "Home-yellee.png",
      "link": "",
      "github": "",
      "figma": "https://www.figma.com/design/A3a99H6LO1p6hBd43fncBx/Yellee-portfolio?node-id=20-2&p=f&t=gOgtJS7SctXBTO3j-0",
      "notion": "https://www.notion.so/Yellee-90634ca5f0aa47398bf2b695341cfeb1",
      "date": "2018.09 - 12",
      "info": "옐리는 온라인 커머스 서비스입니다. Yellow 와 -ly 의 합성어로 보다 친숙하게 다가가고자 하며, 브랜드 특징인 옐로우로 포인트를 잡고 작업하였습니다. (기획 100% | 디자인 100%)",
      "infoDetail": [
        "∙ 전체 서비스 기획",
        "∙ 전체 UI/UX 작업",
        "∙ 외주 개발자와 소통 및 전체 QA진행"
      ],
      "projectDetail": [
        {
          "tag": "UX/UI",
          "title": "화면 설계, 디자인 관련 컴포넌트 & 전체 디자인 작업",
          "detail": ["⇒ 반응형 아닌 모바일, 웹 별도 페이지로 제작"]
        },
        {
          "tag": "문제",
          "title": "디자이너와 개발자가 각기 다른 외주라 소통의 어려움",
          "detail": []
        },
        {
          "tag": "해결",
          "title": "QA 관련 부분은 구글시트를 제작해 자세하게 소통하고, 화면 설계 및 UX/UI 부분은 Zeplin에 상세하게 설명",
          "detail": []
        }
      ],
      "skill": ["Sketch", "Zeplin"],
      "mainImg": "Main-yellee.png",
      "projectImgPC": [
        "yellee-pc-01.png",
        "yellee-pc-02.png",
        "yellee-pc-03.png",
        "yellee-pc-04.png",
        "yellee-pc-05.png",
        "yellee-pc-06.png"
      ],
      "projectGif": [],
      "projectImgMobile": []
    },
    {
      "id": 9,
      "title": "Dokripwoondong",
      "items": ["APP", "운영"],
      "imgUrl": "Home-dokrip.png",
      "link": "",
      "github": "",
      "figma": "https://www.figma.com/design/6AmZZENYEVIaJfILwav13q/%EB%8F%85%EB%A6%BD%EC%9A%B4%EB%8F%99-portfolio?node-id=19-2&p=f&t=yrypSk6pSeVeXBdC-0",
      "notion": "https://www.notion.so/9ef08ee1f85a4da8a2adbd7f2236a879",
      "date": "2016.03 - 2017.09",
      "info": "언제 어디서나 원하는 시간과 장소에 맞춰 운동할 수 있는 O2O 서비스를 운영. 기존에 만들어진 앱을 전체적으로 리뉴얼 하는 작업 등을 진행하였습니다. (기획 70% | 디자인 100)",
      "infoDetail": [
        "∙ 사내 첫 UI/UX 담당자로 앱 리뉴얼 관련 기획, UI/UX 및 자체 서비스 운영 업무",
        "∙ 전체 페이지 앱 리뉴얼 기획 및 UI/UX 개선",
        "∙ 서비스 운영 및 이벤트 페이지 디자인"
      ],
      "projectDetail": [
        {
          "tag": "UX/UI",
          "title": "앱 리뉴얼 관련 전체 화면 설계 및 UX/UI 작업으로 각종 페이지 UI/UX 개선",
          "detail": ["⇒ 메인, 상세페이지, 예약페이지, 결제페이지 등"]
        },
        {
          "tag": "문제",
          "title": "처음 입사 시 외주 업체에서 작업한 앱 디자인 파악 필요",
          "detail": []
        },
        {
          "tag": "해결",
          "title": "매주 한 번씩 외주 업체로 출근해서 직접 소통하고 진행",
          "detail": []
        },
        {
          "tag": "경험",
          "title": "주말에 돌아가면서 CS 대응을 하면서 고객이 실제 서비스를 경험하는데 어떤 문제점이 있는지 파악 후 앱 리뉴얼에 반영",
          "detail": []
        },
        {
          "tag": "디자인",
          "title": "서비스 운영 및 이벤트 페이지 디자인",
          "detail": []
        }
      ],
      "skill": ["Photoshop", "Illustrator"],
      "mainImg": "Main-dokrip.png",
      "projectImgPC": [
        "dokrip-pc-01.png",
        "dokrip-pc-02.png",
        "dokrip-pc-03.png",
        "dokrip-pc-04.png",
        "dokrip-pc-05.png",
        "dokrip-pc-06.png",
        "dokrip-pc-07.png",
        "dokrip-pc-08.png"
      ],
      "projectGif": [],
      "projectImgMobile": []
    }
  ]
}
